다음 문제로 넘어가면 어떻게 문제를 풀어내서 쉽게 해야 할지를 모르겠다. 알다가도 모르겠다.

어떤건 정말 단순하게 생각하고 했는데 해결되어서 혼자 어깨가 하늘까지 닿았다가도 어떤 건 쉽게 생각했다가 안되니 또 자존감이 바닥을 찍는다.

오늘은 해결이 되든 안되든 일단 최대한 여러개를 풀어봤다.

하, 중하 문제라서 그런지 몰라도 웬만한건 거의 for문, if문 사용으로 해결이 되는 것 같다.

그리고 특히나 substring을 너무 유용하게 쓰고 있어서 이건 앞으로도 잊어버리지 않고 잘 활용할 것 같다.

 

문자열을 뒤에서 부터 원하는 길이만큼 잘라낼 때는 length() - 원하는 자릿수;

 

문자열 대소문자로 변환하는 toLowerCase 와 toUpperCase

toLowerCase 는 모든 문자열을 소문자로 변환

ㄴ 예시 / String str1 = str.toLowerCase();

 

toUpperCase 는 모든 문자열을 대문자로 변환

ㄴ 예시 / String str2 = str.toUpperCase();

 

[핸드폰 번호 가리기]

문제 설명

프로그래머스 모바일은 개인정보 보호를 위해 고지서를 보낼 때 고객들의 전화번호의 일부를 가립니다.
전화번호가 문자열 phone_number로 주어졌을 때, 전화번호의 뒷 4자리를 제외한 나머지 숫자를 전부 *으로 가린 문자열을 리턴하는 함수, solution을 완성해주세요.

제한 조건
phone_number는 길이 4 이상, 20이하인 문자열입니다.
입출력 예

 

풀이

 

 

class Solution {
    public String solution(String phone_number) {
        String answer = "";
        int length = phone_number.length() - 4;       //뒤에서부터 4번째까지 문자열 길이를 자른다
        for(int i = 0; i < length; i++) {                    // 잘라내고 남은 길이만큼의 *을 붙여준다.
            answer += "*";
            }
        answer += phone_number.substring(length);   // 길이만큼 증가한 *에 잘린 문자열을 더해준다.
        return answer;
    }
}

[행렬의 덧셈]

문제 설명

행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결과를 반환하는 함수, solution을 완성해주세요.

제한 조건
행렬 arr1, arr2의 행과 열의 길이는 500을 넘지 않습니다.
입출력 예
 

풀이

class Solution {
    public int[][] solution(int[][] arr1, int[][] arr2) {
        int[][] answer = new int[arr1.length][arr1[0].length]; //2차원 배열 arr1과 arr2를 파라미터로 받아 answer배열 반환

                                                                         //answer의 크기는 arr1의 행 길이와 arr1[0] 열 길이로 선언                                                                              
        for(int i = 0; i < arr1.length; i++){           // for문을 arr1의 행의 길이만큼 돌리고
            for(int j = 0; j < arr1[i].length; j++){    // 안에 for문은 각 행의 열의 길이만큼 돌면서 arr1과 arr2의 값을 하나씩 더한다
                answer[i][j]=arr1[i][j]+arr2[i][j];         // 다 돌면 같은 자리에 넣는다.
            }
        }
        return answer;
    }
}

 

[x만큼 간격이 있는 n개의 숫자]

문제 설명

함수 solution은 정수 x와 자연수 n을 입력 받아, x부터 시작해 x씩 증가하는 숫자를 n개 지니는 리스트를 리턴해야 합니다. 다음 제한 조건을 보고, 조건을 만족하는 함수, solution을 완성해주세요.

제한 조건
x는 -10000000 이상, 10000000 이하인 정수입니다.
n은 1000 이하인 자연수입니다.
입출력 예

풀이

class Solution {
    public long[] solution(int x, int n) {
        long[] answer = new long[n];          //입력받은 갯수 n은 배열의 크기로 설정
        long num = x;                            // int > long으로 변경
        for(int i = 0; i < answer.length; i++){   //배열의 자릿수만큼 반복
            answer[i] = num;                     // i 번째는 x 부터 시작
            num += x;                             // x부터 x만큼 더해준다
        }
        return answer;
    }
}

 

[부족한 금액 계산하기] #이건 도움받아 풀면서도, 아직도 이해가 제대로 안 된다. 다시 한번!

 

문제 설명

새로 생긴 놀이기구는 인기가 매우 많아 줄이 끊이질 않습니다. 이 놀이기구의 원래 이용료는 price원 인데, 놀이기구를 N 번 째 이용한다면 원래 이용료의 N배를 받기로 하였습니다. 즉, 처음 이용료가 100이었다면 2번째에는 200, 3번째에는 300으로 요금이 인상됩니다.
놀이기구를 count번 타게 되면 현재 자신이 가지고 있는 금액에서 얼마가 모자라는지를 return 하도록 solution 함수를 완성하세요.
단, 금액이 부족하지 않으면 0을 return 하세요.

제한사항
놀이기구의 이용료 price : 1 ≤ price ≤ 2,500, price는 자연수
처음 가지고 있던 금액 money : 1 ≤ money ≤ 1,000,000,000, money는 자연수
놀이기구의 이용 횟수 count : 1 ≤ count ≤ 2,500, count는 자연수

입출력 예 설명

입출력 예 #1
이용금액이 3인 놀이기구를 4번 타고 싶은 고객이 현재 가진 금액이 20이라면, 총 필요한 놀이기구의 이용 금액은 30 (= 3+6+9+12) 이 되어 10만큼 부족하므로 10을 return 합니다.

 

풀이

 

class Solution {
    public long solution(int price, int money, int count) {
           long answer = -1;
        long playMoney = 0;
        for(long i = 1; i <= count; i++) {
         long tmpMoney = price * i;
         playMoney += tmpMoney;
        }
        answer = playMoney - money;
        if(answer < 0) {
         answer = 0;
        }
        return answer;
    }
}

 

 

[2016년] # 프로그래머스 내에서 import 받아서 하긴 했지만 이것도 다시 한번!!!!

문제 설명

2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요? 두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각 SUN,MON,TUE,WED,THU,FRI,SAT

입니다. 예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 "TUE"를 반환하세요.

제한 조건
2016년은 윤년입니다.
2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다)

 

풀이

import java.time.DayOfWeek;
import java.time.LocalDate;
class Solution {
    public String solution(int a, int b) {
        String answer = "";
     int year = 2016;
     int month = a;
     int day = b;
     LocalDate date = LocalDate.of(year, month, day);
     int iDay = date.getDayOfWeek().getValue();
    
     switch(iDay) {
     case 1: // 월
     answer = "MON";
     break;
     case 2: // 화
     answer = "TUE";
     break;
     case 3: // 수
     answer = "WED";
     break;
     case 4: // 목
     answer = "THU";
     break;
     case 5: // 금
     answer = "FRI";
     break;
     case 6: // 토
     answer = "SAT";
     break;
     case 7: // 일
     answer = "SUN";
     break;    
     }

        return answer;
    }
}

 

[이상한 문자 만들기]

문제 설명

문자열 s는 한 개 이상의 단어로 구성되어 있습니다. 각 단어는 하나 이상의 공백문자로 구분되어 있습니다. 각 단어의 짝수번째 알파벳은 대문자로, 홀수번째 알파벳은 소문자로 바꾼 문자열을 리턴하는 함수, solution을 완성하세요.

제한 사항
문자열 전체의 짝/홀수 인덱스가 아니라, 단어(공백을 기준)별로 짝/홀수 인덱스를 판단해야합니다.
첫 번째 글자는 0번째 인덱스로 보아 짝수번째 알파벳으로 처리해야 합니다.

입출력 예 설명

"try hello world"는 세 단어 "try", "hello", "world"로 구성되어 있습니다. 각 단어의 짝수번째 문자를 대문자로, 홀수번째 문자를 소문자로 바꾸면 "TrY", "HeLlO", "WoRlD"입니다. 따라서 "TrY HeLlO WoRlD" 를 리턴합니다.

 

풀이

class Solution {
    public String solution(String s) {
        String answer = "";
        int count = 1;
        for(int i = 0; i < s.length(); i++) {
            String temp = s.substring(i, i + 1);
            char a = s.charAt(i);
            if(a >= 65 && a <= 122){              //아스키 코드를 이용한 A~z까지 / A보다 크거나 같고 z보다 작거나 같은
                if(count %2 == 1){                // 홀수라면
                    answer += temp.toUpperCase();     // 대문자로 변경해준다
                }else{                                        //홀수가 아니라 짝수라면
                    answer += temp.toLowerCase();     // 소문자로 변경해준다
                }
            }
            if(a == 32) {                       //만약 공백이라면 (아스키코드 32는 Space(공백)이다.)
                count = 0;                    // 0번째 자리부터 시작
                answer += temp;
            }
            count++;
        }
        return answer;
    }
}
